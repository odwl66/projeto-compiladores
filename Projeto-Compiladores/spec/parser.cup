import compiler.util.*;
import compiler.core.*;
import compiler.analysis.*;
import compiler.generator.*;

parser code  {:
 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
:};

terminal COMMA, SEMICOLON, COLON, DOT, DOT_DOT, LPAREN, RPAREN, LBRACK, RBRACK, POINTER, NIL, NOT;
terminal EQ, ASSIGNMENT, DIF, LESST, LESSEQ, GREAT, GREATEQ, IN, PLUS, LESS, MULT, DIVI; 
terminal PROGRAM, CONST, LABEL, TYPE, PACKED, ARRAY, OF, RECORD, BEGIN, END, CASE, SET, FILE, VAR, PROCEDURE, FUNCTION, FORWARD;
terminal OR, DIV, MOD, AND, TIL;
terminal IF, ELSE, DO, WHILE, FOR, BREAK, CONTINUE, RETURN, GOTO, UNTIL, REPEAT, TO, DOWNTO, WITH, THEN;

terminal java.lang.Boolean BOOLEAN_LITERAL;
terminal java.lang.String IDENTIFIER;
terminal java.lang.String STRING;
terminal java.lang.Number INTEGER_NUMBER;
terminal java.lang.Number REAL_NUMBER;

non terminal program;
non terminal program_heading, program_heading_opt, block;
non terminal identifier_list;
non terminal declaration_part, statement_part, statement_sequence, simple_statement, structured_statement;
non terminal statement, statement_block, assignment_statement, procedure_statement, goto_statement, aux_statement_sequence, statement_aux;
non terminal expression, expression_opt, expression_end_option, expression_loop;
non terminal while_statement, repeat_statement, for_statement, initial_expression, final_expression;
non terminal if_statement, case_statement, case_limb, case_limb_ext;
non terminal actual_parameter_list, actual_parameter, actual_value, actual_procedure, actual_function, actual_parameter_ext;
non terminal actual_variable, record_variable, record_variable_ext, procedure_identifier, function_identifier;
non terminal compound_statement, repetitive_statement, conditional_statement, with_statement;
non terminal label, label_declaration_part, label_declaration_part_opt, label_declaration_part_ext, optional_label;
non terminal constant_definition_part, constant_definition_part_opt, constant_definition_part_ext, constant_definition, constant, constant_identifier;
non terminal simple_type, structured_type, pointer_type, type_identifier, type;
non terminal type_definition_part, type_definition_part_opt, type_definition_part_ext, type_definition;
non terminal subrange_type, enumerated_type;
non terminal unpacked_structured_type, array_type, record_type, set_type, file_type;
non terminal index_type, index_type_ext, element_type, field_list;
non terminal fixed_part, variant_part_opt, variant_part;
non terminal record_section, record_section_ext;
non terminal tag_field;
non terminal variant, variant_ext;
non terminal case_label_list, case_label_list_ext;
non terminal constant_ext;
non terminal for_div_1;
non terminal lower_bound, upper_bound;
non terminal variable_declaration_part, variable_declaration_part_opt, variable_declaration_part_ext, variable_declaration, variable_identifier, variable;
non terminal procedure_and_function_declaration_part, procedure_and_function_declaration_part_opt;
non terminal procedure_declaration, procedure_heading, procedure_body, directive, procedure_identification;
non terminal formal_parameter_list_opt, formal_parameter_list, formal_parameter_section, formal_parameter_section_ext;
non terminal value_parameter_section, variable_parameter_section, procedure_parameter_section, function_parameter_section;
non terminal parameter_type, conformant_array_schema, packed_conformant_array_schema, unpacked_conformant_array_schema;
non terminal bound_specification, bound_specification_ext, ordinal_type_identifier;
non terminal function_declaration, function_heading, function_body, result_type;
non terminal number;
non terminal base_type;
non terminal file_component_type;
non terminal compiler_defined_directives;
non terminal entire_variable, component_variable, referenced_variable;
non terminal field_identifier;
non terminal indexed_variable, field_designator, file_buffer;
non terminal array_variable, expression_list, expression_ext, simple_expression, relational_operator, addition_operator, multiplication_operator;
non terminal file_variable;
non terminal pointer_variable, multiplication_operator_ext;
non terminal bound_identifier, term, factor, set, function_designator;
non terminal else_opt;
non terminal semicolon_opt;
non terminal addition_operator_term_ext;
non terminal element_list;
non terminal relational_operator_opt;
non terminal sign;
non terminal identifier_list_var_decl;

precedence left BOOLEAN_LITERAL, IDENTIFIER;

start with program;

program ::=
    program_heading block DOT {:Logger.print("Program definition"); CodeGenerator.getInstance().generateFinalAssemblyCode();:}
;

program_heading ::=
    PROGRAM IDENTIFIER program_heading_opt SEMICOLON {:Logger.print("Program header definition");:}
;

program_heading_opt ::=
	|
	LPAREN identifier_list RPAREN {:Logger.print("Program header optional definition");:}
;

identifier_list ::= 
	IDENTIFIER COMMA identifier_list {:Logger.print("Identifier list definition");:}
	| IDENTIFIER:id   {:Logger.print("Identifier list definition, id: " + id);:}
;

block ::= 
	declaration_part statement_part {: Logger.print("Block definition");:}
;

declaration_part ::=
	label_declaration_part_opt 
	constant_definition_part_opt
	type_definition_part_opt
	variable_declaration_part_opt
	procedure_and_function_declaration_part_opt	{: Logger.print("Declaration part definition");:}
;

label_declaration_part_opt ::= 
	|
	label_declaration_part {: Logger.print("Label declaration part optional definition");:}
;

label_declaration_part ::=
	LABEL label label_declaration_part_ext SEMICOLON {: Logger.print("Label declaration part definition");:}
;

label_declaration_part_ext ::=
	|
	COMMA label label_declaration_part_ext  {: Logger.print("Label declaration part extended definition");:}
;

label ::=
	INTEGER_NUMBER:in {: Logger.print("Label definition: " + in);:}
;

constant_definition_part_opt  ::=
	|
	constant_definition_part {: Logger.print("Constant definition part optional definition");:}
;

constant_definition_part ::=
	CONST constant_definition SEMICOLON constant_definition_part_ext {: Logger.print("Constant definition part definition");:}
;

constant_definition_part_ext ::=
	|
	constant_definition SEMICOLON constant_definition_part_ext {: Logger.print("Constant definition part extended definition");:}
;

constant_definition ::=
	IDENTIFIER:id EQ constant:c {: Logger.print("Constant definition definition, id: " + id + " constant:" + c); SemanticImpl.getInstance().addVariable(new Variable(id, (Type) c, true));CodeGenerator.getInstance().GenerateConstantDefinition(new Variable((String) id, new Type("null")));:}
;

constant ::=
	IDENTIFIER:id {: Logger.print("Constant definition, id: " + id); RESULT = SemanticImpl.getInstance().findVariableByIdentifier(id).getType();:}	|
	sign IDENTIFIER:id {: Logger.print("Constant definition, id: " + id); Type type = SemanticImpl.getInstance().findVariableByIdentifier(id).getType(); SemanticImpl.getInstance().typeIsNumber(type);RESULT = type;:}	|
	number:n {: Logger.print("Constant definition, number: " + n); RESULT = n;:} |
	STRING:s {: Logger.print("Constant definition, string: " + s); RESULT = new Type("array");CodeGenerator.getInstance().currentValue(s);:} |
	BOOLEAN_LITERAL:bl {: Logger.print("Constant definition, boolean literal: " + bl); RESULT = new Type("boolean");:}
;

sign ::=
	PLUS |
	LESS
;

number ::=
	INTEGER_NUMBER:number {:Logger.print("Number definition"); RESULT = new Type("integer");CodeGenerator.getInstance().currentValue(number.intValue());:}
	| REAL_NUMBER:real {:Logger.print("Number definition"); RESULT = new Type("real");CodeGenerator.getInstance().currentValue(real.floatValue());:}
;


type_definition_part_opt ::=
	|
	type_definition_part {: Logger.print("Type definition part optional definition");:}
;

type_definition_part ::=
	TYPE type_definition SEMICOLON type_definition_part_ext {: Logger.print("Type definition part definition");:}
;

type_definition_part_ext ::=
	|
	type_definition SEMICOLON type_definition_part_ext {: Logger.print("Type definition part extended definition");:}
;

type_definition ::=
	IDENTIFIER:id EQ type:tp {:Logger.print("Type definition definition, id:" + id); SemanticImpl.getInstance().checkTypeExists(((Type)tp)); Type t = new Type(id); SemanticImpl.getInstance().addType(t);:}
;

type ::=
	simple_type:st  {: Logger.print("Type definition - simple type"); RESULT = st;:}
	| structured_type:st {: Logger.print("Type definition - structured type"); RESULT = st;:}
	| pointer_type:pt  {: Logger.print("Type definition - pointer type"); RESULT = pt;:}
	| type_identifier:ti {: Logger.print("Type definition - type identifier"); RESULT = ti;:}
;

simple_type ::=
	subrange_type:st {: Logger.print("Simple type definition"); RESULT = new Type("subrange");:}
	| enumerated_type {: Logger.print("Simple type definition"); RESULT = new Type("enumerated");:}
; 

subrange_type ::=
	lower_bound DOT_DOT upper_bound {: Logger.print("Subrange type definition");:}
;

lower_bound ::=
	constant {: Logger.print("Lower bound definition");:}
;

upper_bound ::=
	constant {: Logger.print("Upper bound definition");:}
;

enumerated_type ::=
	LPAREN identifier_list RPAREN {: Logger.print("Enumerated type definition");:}
;

structured_type ::=
	PACKED unpacked_structured_type:ust {: Logger.print("Structured type definition");  RESULT = ust;:}
	| unpacked_structured_type:ust {: Logger.print("Structured type definition"); RESULT = ust;:}
; 

unpacked_structured_type ::=
	array_type {: Logger.print("Unpacked structured type definition"); RESULT = new Type("array");:}
	| record_type {: Logger.print("Unpacked structured type definition");  RESULT = new Type("record");:}
	| set_type {: Logger.print("Unpacked structured type definition");  RESULT = new Type("set");:}
	| file_type {: Logger.print("Unpacked structured type definition");  RESULT = new Type("file");:}
;

array_type ::=
	ARRAY LBRACK index_type index_type_ext RBRACK OF element_type {: Logger.print("Array type definition");:}
;

index_type_ext ::=
	|
	COMMA index_type index_type_ext {: Logger.print("Index type extended definition");:}
;

index_type ::=
	simple_type {: Logger.print("Index type definition");:}
;

element_type ::=
	type {: Logger.print("Element type definition");:}
;

record_type ::=
	RECORD field_list END {: Logger.print("Record type definition");:}
;

field_list ::=
	fixed_part variant_part_opt {: Logger.print("Field list definition");:}
	| variant_part {: Logger.print("Field list definition");:}
	|
;

fixed_part ::=
	record_section record_section_ext {: Logger.print("Fixed part definition");:}
;

record_section_ext ::=
	|
	SEMICOLON record_section record_section_ext {: Logger.print("Record section extended definition");:}
;

record_section ::=
	identifier_list:il COLON type:t {: Logger.print("Record section definition, type: " + t + " identifier list :" + il);:}
;

variant_part_opt ::=
	|
	SEMICOLON variant_part {: Logger.print("Variant part optional definition");:}
;

variant_part ::=
	CASE tag_field IDENTIFIER OF variant variant_ext {: Logger.print("Variant part definition");:}
;

tag_field ::=
	|
	IDENTIFIER COLON {: Logger.print("Tag field definition");:}
;


variant_ext ::=
	|
	SEMICOLON variant variant_ext  {: Logger.print("Variant extended definition");:}
;

variant ::= 
	case_label_list COLON LPAREN field_list RPAREN {: Logger.print("Variant definition");:}
;

case_label_list ::=
	constant constant_ext {: Logger.print("Case label list definition");:}
;

constant_ext ::=
	|
	COMMA constant constant_ext {: Logger.print("Constant extended definition");:}
;

set_type ::=
	SET OF base_type {: Logger.print("Set type definition");:}
; 

base_type ::=
	type {: Logger.print("Base type definition");:}
;

file_type ::=
	FILE OF file_component_type {: Logger.print("File type definition");:}
;

file_component_type ::=
	type {: Logger.print("File component type definition");:}
;

pointer_type ::=
	POINTER IDENTIFIER:id {: Logger.print("Pointer type definition");  RESULT = new Type(id);:}
; 

type_identifier ::=
	IDENTIFIER:id {: Logger.print("Type identifier definition"); RESULT = new Type(id);:}
;

variable_declaration_part_opt ::=
	|
	variable_declaration_part {: Logger.print("Variable declaration part optional definition");:}
;

variable_declaration_part ::=
	VAR variable_declaration SEMICOLON variable_declaration_part_ext {: Logger.print("Variable declaration part definition");:}
;

variable_declaration_part_ext ::=
	|
	variable_declaration SEMICOLON variable_declaration_part_ext {: Logger.print("Variable declaration part extended definition");:} 
;

variable_declaration ::=
	identifier_list_var_decl COLON type:t {:Logger.print("Variable declaration definition, type: " + t); SemanticImpl.getInstance().addVariablesFromTempList((Type) t);:}
;

identifier_list_var_decl ::=
	IDENTIFIER:id1 COMMA identifier_list_var_decl {:Logger.print("Identifier list variable declaration definition, id: " + id1);
	SemanticImpl.getInstance().addVariableToTempList(new Variable((String) id1, new Type("null")));
	CodeGenerator.getInstance().declareVariable(new Variable((String) id1, new Type("null")));:}
	| IDENTIFIER:id2   {:Logger.print("Identifier list list variable declaration definition, id: " + id2);
						Variable variable = new Variable((String) id2, new Type("null"));
						SemanticImpl.getInstance().addVariableToTempList(variable);
						CodeGenerator.getInstance().declareVariable(variable);:}
;

procedure_and_function_declaration_part_opt ::=
	{: Logger.print("Procedure and function declaration part optional vazio");:} | 
	procedure_and_function_declaration_part {: Logger.print("Procedure and function declaration part optional definition");:}
;

procedure_and_function_declaration_part ::=
	procedure_declaration SEMICOLON {: Logger.print("Procedure and function declaration part definition");:}
	| function_declaration SEMICOLON {: Logger.print("Procedure and function declaration part definition");:}
	| procedure_declaration SEMICOLON function_declaration SEMICOLON {: Logger.print("Procedure and function declaration part definition");:}
;

procedure_declaration ::=
	procedure_heading SEMICOLON procedure_body {: Logger.print("Procedure declaration definition");:} 
	| procedure_heading SEMICOLON directive {: Logger.print("Procedure declaration definition");:}
;


procedure_heading ::= PROCEDURE:p IDENTIFIER:id formal_parameter_list_opt {: Logger.print("PROCEDURE: " + p); 
															if(p != null){ 
																SemanticImpl.getInstance().lineError = ((int) p);
															} if(id != null){
																Logger.print("identifier: " + id);
																SemanticImpl.getInstance().addIdentifier(id.toString());
																SemanticImpl.getInstance().addProcedure(id.toString());
															} :};

formal_parameter_list_opt ::=
	|
	formal_parameter_list {: Logger.print("Formal parameter list optional definition");:}
;

formal_parameter_list ::=
	LPAREN formal_parameter_section formal_parameter_section_ext RPAREN {: Logger.print("Formal parameter list definition");:}
;

formal_parameter_section_ext ::=
	 |
	 SEMICOLON formal_parameter_section formal_parameter_section_ext {: Logger.print("Formal parameter section extended definition");:}
;

formal_parameter_section ::=
	value_parameter_section {: Logger.print("Formal parameter section definition");:} 
	| variable_parameter_section {: Logger.print("Formal parameter section definition");:} 
	| procedure_parameter_section {: Logger.print("Formal parameter section definition");:}
	| function_parameter_section {: Logger.print("Formal parameter section definition");:}
;

value_parameter_section ::=
	identifier_list COLON parameter_type {: Logger.print("Value parameter section definition");:}
;

parameter_type ::=
	type_identifier {: Logger.print("Parameter type definition");:}
	| conformant_array_schema {: Logger.print("Parameter type definition");:}
;

conformant_array_schema ::=
	packed_conformant_array_schema {: Logger.print("Conformant array schema definition");:}
	| unpacked_conformant_array_schema {: Logger.print("Conformant array schema definition");:}
;

packed_conformant_array_schema ::=
	PACKED ARRAY LBRACK bound_specification RBRACK OF type_identifier {: Logger.print("Packed conformant array schema definition");:}
; 

bound_specification_ext ::=
	|
	SEMICOLON bound_specification bound_specification_ext {: Logger.print("Bound specification extended definition");:} 
;

bound_specification ::=
	IDENTIFIER DOT_DOT IDENTIFIER COLON ordinal_type_identifier {: Logger.print("Bound specification definition");:}
;

ordinal_type_identifier ::=
	type_identifier {: Logger.print("Ordinal type identifier definition");:}
;

unpacked_conformant_array_schema ::=
	ARRAY LBRACK bound_specification bound_specification_ext RBRACK OF type_identifier {: Logger.print("Unpacked conformant array schema definition");:}
	| ARRAY LBRACK bound_specification bound_specification_ext RBRACK OF conformant_array_schema {: Logger.print("Unpacked conformant array schema definition");:}
;

variable_parameter_section ::=
	VAR identifier_list COLON parameter_type {: Logger.print("Variable parameter section definition");:}
; 

procedure_parameter_section ::=
	procedure_heading {: Logger.print("Procedure parameter section definition");:}
; 

function_parameter_section ::=
	function_heading {: Logger.print("Function parameter section definition");:}
;

function_heading ::= FUNCTION:f IDENTIFIER:id formal_parameter_list_opt:fp COLON result_type:rt {:
		Logger.print("function heading returned type: " + fp);
		if(f != null){ 
			Logger.print("entrou no f !=null");
			SemanticImpl.getInstance().lineError = ((int) f);
		} if(id != null){ 
			Logger.print("entrou no id!=null ");
			Logger.print("rt: " + rt);
			SemanticImpl.getInstance().addIdentifier(id.toString());
			SemanticImpl.getInstance().addFunction(id.toString(), rt);
		} :}
;


result_type ::= type_identifier:rt {: if(rt != null){ 
			Logger.print("Result type definition : " + rt);		 
			RESULT = rt; 
			} :}
;

procedure_body ::=
	block {: Logger.print("Procedure body definition");:}
;

directive ::=
	FORWARD {: Logger.print("Directive definition");:}
	| compiler_defined_directives {: Logger.print("Directive definition");:}
;

compiler_defined_directives ::=

;

procedure_identification ::=
	PROCEDURE procedure_identifier {: Logger.print("Procedure identification definition");:}
;

function_declaration ::=
	function_heading SEMICOLON function_body 
	| function_heading SEMICOLON directive
;

function_body ::=
	block
;

statement_part ::= 
	BEGIN statement_sequence END {:Logger.print("Statement Part");:} 

;

statement ::=
  {:Logger.print("Statement - line 1");:} optional_label simple_statement |
  {:Logger.print("Statement - line 2");:} optional_label structured_statement
;

statement_sequence ::=
  statement aux_statement_sequence {:Logger.print("Statement sequence");:}
;

aux_statement_sequence ::=
  {:Logger.print("Aux statement sequence - Vazio -> ");:} |
  {:Logger.print("Aux statement sequence - line 2 -> statement ; aux_statement_sequence");:}  SEMICOLON statement aux_statement_sequence
;

optional_label ::=
  {:Logger.print("Optional Label - Vazio");:} |
  {:Logger.print("Optional Label - line 2");:} label COLON
;

simple_statement ::=
  {:Logger.print("Simple Statement - Vazio");:} |
  {:Logger.print("Simple Statement - line 2");:} assignment_statement |
  {:Logger.print("Simple Statement - line 3");:} procedure_statement |
  {:Logger.print("Simple Statement - line 4");:} goto_statement
;

variable ::=
	entire_variable:ev {:Logger.print("Variable - entire variable");RESULT = ev;:} |
	component_variable:cv {:Logger.print("Variable - component variable");RESULT = cv;:} |
	referenced_variable:rv {:Logger.print("Variable - referenced variable");RESULT = rv;:}
;

entire_variable ::=
	variable_identifier:vi {:Logger.print("entire variable - variable identifier");RESULT = vi;:} |
	field_identifier:fi {:Logger.print("entire variable - field identifier");RESULT = fi;:} 
;

variable_identifier ::=
	IDENTIFIER:id {:Logger.print("variable identifier");RESULT = id;:}
; 

field_identifier ::=
	IDENTIFIER:id {:Logger.print("field identifier"); RESULT = id;:}
;

component_variable ::= 
	indexed_variable:iv {:Logger.print("component variable - indexed variable");RESULT = iv;:} |
	field_designator:fd {:Logger.print("component variable - field designator");RESULT = fd;:} |
	file_buffer:fb {:Logger.print("component variable - file buffer");RESULT =fb;:}
;

indexed_variable ::=
	array_variable:av LBRACK expression_list RBRACK {:Logger.print("indexed variable");RESULT = av;:} 
;

array_variable ::=
	variable:v {:Logger.print("array variable");RESULT = v;:} 
;

expression_list ::=
	{:Logger.print("Expression list");:} expression expression_ext 
;

expression_ext ::=
	{:Logger.print("expression ext - vazio");:} |
	{:Logger.print("expression ext - line 2");:} COMMA expression expression_ext 
;

field_designator ::=
	record_variable:rv DOT field_identifier {:Logger.print("field designator");RESULT = rv;:} 
;

file_buffer ::=
	file_variable:fv POINTER {:Logger.print("file buffer");RESULT = fv;:} 
;

file_variable ::=
	variable:v {:Logger.print("file variable");RESULT = v;:}
;
 
referenced_variable ::=
	pointer_variable:pv POINTER {:Logger.print("referenced variable");RESULT = pv;:} 
;

pointer_variable ::=
	variable:v {:Logger.print("pointer variable");RESULT = v;:}
;

assignment_statement ::=
  variable:var ASSIGNMENT expression:e {:Logger.print("Assignment Statement - line 1");
  										SemanticImpl.getInstance().initializeVariable((String) var);
  										CodeGenerator.getInstance().assignment((Expression) e, (String) var);:} |
  {:Logger.print("Assignment Statement - line 2");:} function_identifier ASSIGNMENT expression 
;

structured_statement ::=
  {:Logger.print("Structured statement - line 1");:} compound_statement |
  {:Logger.print("Structured statement - line 2");:} repetitive_statement |
  {:Logger.print("Structured statement - line 3");:} conditional_statement |
  {:Logger.print("Structured statement - line 4");:} with_statement
;

procedure_statement ::=
  {:Logger.print("Procedure statement - line 1");:} TIL IDENTIFIER actual_parameter_list 
;

goto_statement ::=
  {:Logger.print("Go to statement");:} GOTO label
;

compound_statement ::=
  {:Logger.print("Compound statement");:} BEGIN statement_sequence END
;

repetitive_statement ::=
  {:Logger.print("Repetitive Statement - line 1");:} while_statement |
  {:Logger.print("Repetitive Statement - line 2");:} repeat_statement |
  {:Logger.print("Repetitive Statement - line 3");:} for_statement
;

conditional_statement ::=
	{:Logger.print("Conditional Statement - line 1");:} if_statement |
	{:Logger.print("Conditional Statement - line 2");:} case_statement
;

while_statement ::=
  {:Logger.print("While statement Part");:} WHILE expression DO statement
;

repeat_statement ::=
  {:Logger.print("Repeat statement");:} REPEAT statement_sequence UNTIL expression
;

for_statement ::=
  {:Logger.print("For Statement - line 1");:} FOR variable_identifier ASSIGNMENT initial_expression TO final_expression DO statement |
  {:Logger.print("For Statement - line 2");:} FOR variable_identifier ASSIGNMENT initial_expression DOWNTO final_expression DO statement
;

initial_expression ::=
	expression

;

final_expression ::=
	expression
;


expression ::=
	simple_expression:se relational_operator_opt:roo {:Logger.print("Expression - line 1: " + se + " " + roo);RESULT = SemanticImpl.getInstance().getExpressionType((Expression)se, (Expression)roo);:}
;

relational_operator_opt ::=
	relational_operator simple_expression:se {:Logger.print("Relational operator optional - line 2");RESULT = se;:} |
	{:Logger.print("Relational operator optional - vazio");:}
;

simple_expression ::=
	term:t1 addition_operator_term_ext:aote1 {:Logger.print("Simple expression - line 1: " + t1); RESULT = SemanticImpl.getInstance().getExpressionCheckingError((Expression)t1, (Expression)aote1);:} |
	sign term:t2 addition_operator_term_ext:aote2 {:Logger.print("Simple expression - line 2"); RESULT = SemanticImpl.getInstance().getExpressionCheckingError((Expression)t2, (Expression)aote2);:}
;

addition_operator_term_ext ::=
	{:Logger.print("Adition operator term ext - vazio");:} |
	addition_operator term:t addition_operator_term_ext:aote {:Logger.print("Adition operator term ext - line 2"); RESULT = SemanticImpl.getInstance().getExpressionCheckingError((Expression)t, (Expression)aote);:} 
;

relational_operator ::=
	EQ {:Logger.print("relational operator");:} |
	DIF {:Logger.print("relational operator");:} |
	LESST {:Logger.print("relational operator");:} | 
	LESSEQ {:Logger.print("relational operator");:} | 
	GREAT {:Logger.print("relational operator");:} | 
	GREATEQ {:Logger.print("relational operator");:} | 
	IN {:Logger.print("relational operator");:} 
;


term ::=
	factor:f multiplication_operator_ext:moe {:Logger.print("Term - line 1: " + f + " " + moe); RESULT = SemanticImpl.getInstance().getExpressionCheckingError((Expression)f, (Expression)moe);:}
;

multiplication_operator_ext ::= 
    {:Logger.print("Multiplication operator ext - vazio");:} |
    multiplication_operator factor:f multiplication_operator_ext:moe {:Logger.print("Multiplication operator ext - line 2"); RESULT = SemanticImpl.getInstance().getExpressionCheckingError((Expression)f, (Expression)moe);:}
;


factor ::=
	function_designator {:Logger.print("Factor - designator");RESULT = new Expression(new Type("array"));:} | 
	BOOLEAN_LITERAL:bl {:Logger.print("Factor - boolean literal");
						RESULT = new Expression("BOOLEAN", new Type("boolean"));:} | 
	variable:v {:Logger.print("Factor - variable");
				Variable var = SemanticImpl.getInstance().findVariableByIdentifier((String)v);
				SemanticImpl.getInstance().checkVariableIsInitialized((Variable)var);
				CodeGenerator.getInstance().currentValue(var);
				RESULT = new Expression("VARIABLE", var.getType());:} |
	number:n {:Logger.print("Factor - number: " + n);
				RESULT = new Expression("NUMBER", (Type) n);:} | 
	STRING:s {:Logger.print("Factor - string");
			RESULT = new Expression("STRING", new Type("array"));CodeGenerator.getInstance().currentValue(s);:} | 
	set {:Logger.print("Factor - set");RESULT = new Expression(new Type("set"));:} | 
	NIL {:Logger.print("Factor - nil");RESULT = new Expression(new Type("nil"));:} | 
	constant_identifier | 
	bound_identifier | 
	LPAREN expression:exp RPAREN {:Logger.print("Factor - expression");RESULT = exp;:} | 
	NOT factor:fa {:Logger.print("Factor - not factor");RESULT = fa;:}
;

addition_operator ::=
	{:Logger.print("Addition operator");:} PLUS | LESS | OR
;

multiplication_operator ::= 
	{:Logger.print("Multiplication operator");:} MULT | DIVI | DIV | MOD | AND
;

set ::=
	{:Logger.print("Set");:} LBRACK element_list RBRACK
;

element_list ::=
	{:Logger.print("Element list - vazio");:} |
	{:Logger.print("Element list - line 2");:} expression expression_ext
;

if_statement ::=
	IF expression:exp THEN statement else_opt {:Logger.print("If Statement"); SemanticImpl.getInstance().checkBooleanExpression((Expression)exp);:}
;

else_opt ::=
	ELSE statement:st {:Logger.print("Else opt - else");:} |
	{:Logger.print("Else opt - vazio");:}
;

case_statement ::=
	{:Logger.print("Case Statement");:} CASE expression OF
	case_limb case_limb_ext semicolon_opt
	END
;

semicolon_opt ::=
	{:Logger.print("semicolon opt - vazio");:} | 
	{:Logger.print("semicolon opt - semicolon");:} SEMICOLON
;

case_limb ::= 
	{:Logger.print("Case limb");:} case_label_list COLON statement
;

case_limb_ext ::=
	{:Logger.print("Case limb ext - vazio");:} |
	{:Logger.print("Case limb ext - line 2");:} SEMICOLON case_limb case_limb_ext 
;

case_label_list ::= 
	{:Logger.print("Case label list");:} constant case_label_list_ext
;

case_label_list_ext ::=
	{:Logger.print("Case label list ext - vazio");:} |
	{:Logger.print("Case label list ext - line 2");:} SEMICOLON constant case_label_list_ext
;

with_statement ::=
	WITH record_variable record_variable_ext DO statement
;

record_variable_ext ::=
	|
	COMMA record_variable record_variable_ext 
;

actual_parameter_list ::= 
	{:Logger.print("Actual parameter list");:} LPAREN actual_parameter actual_parameter_ext RPAREN
; 

actual_parameter_ext ::=
	{:Logger.print("actual parameter ext - vazio");:} | 
	{:Logger.print("actual parameter ext - line 2");:} COMMA actual_parameter actual_parameter_ext
;

actual_parameter ::= 
	{:Logger.print("actual parameter - actual value");:} actual_value |
	{:Logger.print("actual parameter - actual variable");:} actual_variable |
	{:Logger.print("actual parameter - actual procedure");:} actual_procedure |
	{:Logger.print("actual parameter - actual function");:} actual_function 
;

actual_value ::= 
	{:Logger.print("actual value");:} expression 
;

actual_procedure ::= 
	{:Logger.print("actual procedure");:} procedure_identifier 
;

actual_function ::= 
	{:Logger.print("actual function");:} function_identifier 
;

actual_variable ::= 
	{: Logger.print("actual variable ");:} variable:v 
;


record_variable ::= 
	variable:v {:Logger.print("record variable");RESULT = v;:} 
;

function_designator ::=
		IDENTIFIER actual_parameter_list
;

variable_identifier ::=
	IDENTIFIER
; 

field_identifier ::=
	IDENTIFIER
;

procedure_identifier ::= 
	{:Logger.print("procedure identifier");:} IDENTIFIER 
;

function_identifier ::= 
	{:Logger.print("function identifier");:} IDENTIFIER
;
 
constant_identifier ::=
 	IDENTIFIER:id {:RESULT = id;:}
;

bound_identifier ::=
	IDENTIFIER
;

