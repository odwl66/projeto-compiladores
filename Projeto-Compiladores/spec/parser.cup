import compiler.util.*;

parser code  {:
 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }
:};

terminal COMMA, SEMICOLON, DOT, LPAREN, RPAREN;
terminal EQ;
terminal PROGRAM, CONST, LABEL;
terminal java.lang.String IDENTIFIER;
terminal java.lang.Number INTEGER_NUMBER;
terminal CONSTANT;


non terminal program;
non terminal program_heading, block;
non terminal identifier_list;
non terminal declaration_part, statement_part;
non terminal label, label_declaration_part, label_declaration_part_opt, label_declaration_part_ext;
non terminal constant_definition_part, constant_definition_part_opt, constant_definition_part_ext, constant_definition;
non terminal type_definition_part, type_definition_part_opt;
non terminal variable_declaration_part, variable_declaration_part_opt;
non terminal procedure_and_function_declaration_part;

start with program;

program ::=
    program_heading block DOT {:Logger.print("Program definition");:}
;

program_heading ::=
    PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON {:Logger.print("Program header definition");:}
;

identifier_list ::= 
	IDENTIFIER   {:Logger.print("Identifier list definition");:}
	| IDENTIFIER COMMA identifier_list {:Logger.print("Identifier list definition");:}
;

block ::= 
	declaration_part statement_part {: Logger.print("Block definition");:}
;

declaration_part ::=
	label_declaration_part_opt 
	constant_definition_part_opt
	type_definition_part_opt
	variable_declaration_part_opt
	procedure_and_function_declaration_part	{: Logger.print("Declaration part definition");:}
;

label_declaration_part_opt ::= 
	|
	label_declaration_part {: Logger.print("Label declaration part optional definition");:}
;

label_declaration_part ::=
	LABEL label label_declaration_part_ext SEMICOLON {: Logger.print("Label declaration part definition");:}
;

label_declaration_part_ext ::=
	|
	COMMA label label_declaration_part_ext  {: Logger.print("Label declaration part extended definition");:}
;

label ::=
	INTEGER_NUMBER {: Logger.print("Label definition");:}
;

constant_definition_part_opt  ::=
	|
	constant_definition_part {: Logger.print("Constant definition part optional definition");:}
;

constant_definition_part ::=
	CONST constant_definition SEMICOLON constant_definition_part_ext {: Logger.print("Constant definition part definition");:}
;

constant_definition_part_ext ::=
	|
	constant_definition SEMICOLON constant_definition_part_ext {: Logger.print("Constant definition part extended definition");:}
;

constant_definition ::=
	IDENTIFIER EQ CONSTANT
;

type_definition_part_opt ::=
	|
	type_definition_part {: Logger.print("Type definition part definition");:}
;

type_definition_part ::=

;

variable_declaration_part_opt ::=
	|
	variable_declaration_part {: Logger.print("Variable declaration part optional definition");:}
;

variable_declaration_part ::=

;

procedure_and_function_declaration_part ::=

;

statement_part ::=

;
