
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 02 21:22:26 BRT 2017
//----------------------------------------------------

package compiler.generated;

import compiler.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 02 21:22:26 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\004\000\002\002\005\000\002\003" +
    "\006\000\002\004\002\000\002\004\005\000\002\006\005" +
    "\000\002\006\003\000\002\005\004\000\002\007\007\000" +
    "\002\013\003\000\002\013\002\000\002\012\006\000\002" +
    "\014\005\000\002\014\002\000\002\011\003\000\002\016" +
    "\003\000\002\016\002\000\002\015\006\000\002\017\005" +
    "\000\002\017\002\000\002\020\005\000\002\021\004\000" +
    "\002\021\003\000\002\021\003\000\002\065\003\000\002" +
    "\065\002\000\002\066\003\000\002\066\003\000\002\030" +
    "\003\000\002\030\002\000\002\027\006\000\002\031\005" +
    "\000\002\031\002\000\002\032\005\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\022\003\000\002\022\003\000\002\033\005\000\002\060" +
    "\003\000\002\061\003\000\002\034\005\000\002\023\004" +
    "\000\002\023\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\036\011\000\002" +
    "\043\005\000\002\043\002\000\002\042\003\000\002\044" +
    "\003\000\002\037\005\000\002\045\004\000\002\045\003" +
    "\000\002\045\002\000\002\046\004\000\002\052\002\000" +
    "\002\052\005\000\002\051\005\000\002\047\002\000\002" +
    "\047\004\000\002\050\010\000\002\053\004\000\002\053" +
    "\002\000\002\055\005\000\002\055\002\000\002\054\007" +
    "\000\002\056\004\000\002\057\005\000\002\057\002\000" +
    "\002\040\005\000\002\067\003\000\002\041\005\000\002" +
    "\070\003\000\002\024\002\000\002\025\002\000\002\063" +
    "\003\000\002\063\002\000\002\062\002\000\002\064\002" +
    "\000\002\010\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\017\006\001\002\000\004\002\216\001" +
    "\002\000\004\021\021\001\ufff7\000\004\033\007\001\002" +
    "\000\004\011\011\001\ufffe\000\004\005\017\001\002\000" +
    "\004\033\013\001\002\000\004\012\016\001\002\000\004" +
    "\004\014\001\ufffb\000\004\033\013\001\002\000\002\001" +
    "\ufffc\000\002\001\ufffd\000\002\001\uffff\000\004\020\036" +
    "\001\ufff1\000\004\035\030\001\002\000\002\001\uffad\000" +
    "\002\001\ufff8\000\004\007\025\001\002\000\002\001\000" +
    "\000\002\001\ufffa\000\004\004\031\001\ufff4\000\002\001" +
    "\ufff3\000\004\035\030\001\002\000\004\005\033\001\002" +
    "\000\002\001\ufff6\000\004\004\031\001\ufff4\000\002\001" +
    "\ufff5\000\004\033\205\001\002\000\004\022\043\001\uffe4" +
    "\000\002\001\ufff2\000\002\001\uffe5\000\002\001\uffb0\000" +
    "\004\033\045\001\002\000\004\005\175\001\002\000\004" +
    "\015\046\001\002\000\030\011\063\016\056\023\060\024" +
    "\076\026\072\031\071\032\054\033\uffe8\034\066\035\073" +
    "\036\075\001\uffb3\000\002\001\uffeb\000\004\010\172\001" +
    "\002\000\002\001\uffd8\000\002\001\uffd0\000\002\001\uffe0" +
    "\000\004\025\167\001\002\000\002\001\uffda\000\002\001" +
    "\uffe9\000\002\001\uffdc\000\012\024\076\026\072\031\071" +
    "\032\054\001\002\000\004\033\165\001\002\000\002\001" +
    "\uffd2\000\004\033\013\001\002\000\002\001\uffd4\000\002" +
    "\001\uffdf\000\002\001\uffea\000\002\001\uffdd\000\002\001" +
    "\uffdb\000\004\025\160\001\002\000\006\030\120\033\013" +
    "\001\uffc7\000\002\001\uffe7\000\002\001\uffd3\000\002\001" +
    "\uffe6\000\004\013\101\001\002\000\002\001\uffde\000\002" +
    "\001\uffd1\000\014\011\063\016\056\034\066\035\073\036" +
    "\075\001\uffe8\000\002\001\uffcc\000\004\004\104\001\uffcd" +
    "\000\014\011\063\016\056\034\066\035\073\036\075\001" +
    "\uffe8\000\004\014\106\001\002\000\004\025\107\001\002" +
    "\000\030\011\063\016\056\023\060\024\076\026\072\031" +
    "\071\032\054\033\uffe8\034\066\035\073\036\075\001\uffb3" +
    "\000\002\001\uffcb\000\002\001\uffcf\000\004\004\104\001" +
    "\uffcd\000\002\001\uffce\000\004\005\155\001\uffc2\000\002" +
    "\001\uffc8\000\004\005\151\001\uffc5\000\004\006\147\001" +
    "\002\000\004\033\124\001\002\000\004\027\122\001\002" +
    "\000\002\001\uffca\000\004\033\126\001\002\000\004\006" +
    "\125\001\002\000\002\001\uffbf\000\004\025\127\001\002" +
    "\000\012\016\056\034\066\035\073\036\075\001\uffe8\000" +
    "\004\005\144\001\uffbc\000\004\004\137\001\uffb8\000\004" +
    "\006\133\001\002\000\004\011\134\001\002\000\006\030" +
    "\120\033\013\001\uffc7\000\004\012\136\001\002\000\002" +
    "\001\uffbb\000\012\016\056\034\066\035\073\036\075\001" +
    "\uffe8\000\002\001\uffba\000\004\004\137\001\uffb8\000\002" +
    "\001\uffb9\000\002\001\uffc0\000\012\016\056\034\066\035" +
    "\073\036\075\001\uffe8\000\004\005\144\001\uffbc\000\002" +
    "\001\uffbd\000\030\011\063\016\056\023\060\024\076\026" +
    "\072\031\071\032\054\033\uffe8\034\066\035\073\036\075" +
    "\001\uffb3\000\002\001\uffc3\000\004\033\013\001\002\000" +
    "\002\001\uffc6\000\004\005\151\001\uffc5\000\002\001\uffc4" +
    "\000\004\030\120\001\002\000\002\001\uffc9\000\002\001" +
    "\uffc1\000\030\011\063\016\056\023\060\024\076\026\072" +
    "\031\071\032\054\033\uffe8\034\066\035\073\036\075\001" +
    "\uffb3\000\002\001\uffb6\000\002\001\uffb7\000\004\012\164" +
    "\001\002\000\002\001\uffd6\000\002\001\uffec\000\002\001" +
    "\uffd5\000\030\011\063\016\056\023\060\024\076\026\072" +
    "\031\071\032\054\033\uffe8\034\066\035\073\036\075\001" +
    "\uffb3\000\002\001\uffb4\000\002\001\uffb5\000\012\016\056" +
    "\034\066\035\073\036\075\001\uffe8\000\002\001\uffd9\000" +
    "\002\001\uffd7\000\004\033\045\001\uffe1\000\004\005\200" +
    "\001\002\000\002\001\uffe3\000\004\033\045\001\uffe1\000" +
    "\002\001\uffe2\000\002\001\uffae\000\002\001\uffb1\000\002" +
    "\001\ufff9\000\004\015\214\001\002\000\004\005\207\001" +
    "\002\000\004\033\205\001\uffee\000\002\001\ufff0\000\004" +
    "\005\212\001\002\000\004\033\205\001\uffee\000\002\001" +
    "\uffef\000\012\016\056\034\066\035\073\036\075\001\uffe8" +
    "\000\002\001\uffed\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\005\023\007\021\012\022\013\017\001\001" +
    "\000\002\001\001\000\004\004\007\001\001\000\002\001" +
    "\001\000\004\006\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\037\016\036" +
    "\001\001\000\004\011\026\001\001\000\004\010\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\031\001\001\000\002\001" +
    "\001\000\004\011\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\034\001\001\000\002\001\001\000" +
    "\004\020\205\001\001\000\006\027\040\030\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\062\202\063" +
    "\201\001\001\000\004\032\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\021\050\022\064\023\076\024" +
    "\066\025\056\026\052\033\067\034\054\035\063\036\073" +
    "\037\061\040\077\041\051\060\047\065\060\066\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\035\165\036\073\037\061\040\077\041\051\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\116\045\120\046\113\050\114\051\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\050\022\101\033\067\034\054\042\102\060\047\065\060" +
    "\066\046\001\001\000\002\001\001\000\004\043\104\001" +
    "\001\000\022\021\050\022\101\033\067\034\054\042\111" +
    "\060\047\065\060\066\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\021\050\022\064\023\076\024\066" +
    "\025\056\026\107\033\067\034\054\035\063\036\073\037" +
    "\061\040\077\041\051\044\110\060\047\065\060\066\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\112\001\001\000\002\001\001\000\004\047\155\001\001" +
    "\000\002\001\001\000\004\052\151\001\001\000\002\001" +
    "\001\000\004\053\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\021\130\054\127\056\131" +
    "\065\060\066\046\001\001\000\004\055\142\001\001\000" +
    "\004\057\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\006\116\045\134\046\113\050\114\051\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\021\140" +
    "\065\060\066\046\001\001\000\002\001\001\000\004\057" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\021\130\054\144\056\131\065\060\066\046\001\001\000" +
    "\004\055\145\001\001\000\002\001\001\000\042\021\050" +
    "\022\064\023\076\024\066\025\056\026\147\033\067\034" +
    "\054\035\063\036\073\037\061\040\077\041\051\060\047" +
    "\065\060\066\046\001\001\000\002\001\001\000\006\006" +
    "\116\051\152\001\001\000\002\001\001\000\004\052\153" +
    "\001\001\000\002\001\001\000\004\050\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\021\050\022\064" +
    "\023\076\024\066\025\056\026\160\033\067\034\054\035" +
    "\063\036\073\037\061\040\077\041\051\060\047\065\060" +
    "\066\046\067\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\021\050\022\064\023\076\024" +
    "\066\025\056\026\167\033\067\034\054\035\063\036\073" +
    "\037\061\040\077\041\051\060\047\065\060\066\046\070" +
    "\170\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\021\173\061\172\065\060\066\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\031\176\032\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\031\200\032" +
    "\175\001\001\000\002\001\001\000\004\064\203\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\207\020\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\212\020\210\001" +
    "\001\000\002\001\001\000\010\021\214\065\060\066\046" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // statement_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // procedure_and_function_declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable_declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable_declaration_part_opt ::= variable_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // type_identifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // pointer_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_type",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // file_component_type ::= type 
            {
              Object RESULT =null;
		 Logger.print("File component type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_component_type",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // file_type ::= FILE OF file_component_type 
            {
              Object RESULT =null;
		 Logger.print("File type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // base_type ::= type 
            {
              Object RESULT =null;
		 Logger.print("Base type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("base_type",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // set_type ::= SET OF base_type 
            {
              Object RESULT =null;
		 Logger.print("Set type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constant_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_ext",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // constant_ext ::= COMMA constant constant_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_ext",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // case_label_list ::= constant constant_ext 
            {
              Object RESULT =null;
		 Logger.print("Case label list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_label_list",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variant ::= case_label_list COLON LPAREN field_list RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Variant definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variant_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_ext",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variant_ext ::= SEMICOLON variant variant_ext 
            {
              Object RESULT =null;
		 Logger.print("Variant extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_ext",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // tag_field ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // tag_field ::= IDENTIFIER COLON 
            {
              Object RESULT =null;
		 Logger.print("Tag field definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // variant_part ::= CASE tag_field IDENTIFIER OF variant variant_ext 
            {
              Object RESULT =null;
		 Logger.print("Variant part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // variant_part_opt ::= SEMICOLON variant_part 
            {
              Object RESULT =null;
		 Logger.print("Variant part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variant_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part_opt",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // record_section ::= identifier_list COLON type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Record section definition, type: " + t + " identifier list :" + il);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // record_section_ext ::= SEMICOLON record_section record_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Record section extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section_ext",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // record_section_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section_ext",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // fixed_part ::= record_section record_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Fixed part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fixed_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // field_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // field_list ::= variant_part 
            {
              Object RESULT =null;
		 Logger.print("Field list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // field_list ::= fixed_part variant_part_opt 
            {
              Object RESULT =null;
		 Logger.print("Field list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;
		 Logger.print("Record type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // element_type ::= type 
            {
              Object RESULT =null;
		 Logger.print("Element type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_type",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // index_type ::= simple_type 
            {
              Object RESULT =null;
		 Logger.print("Index type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // index_type_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_ext",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // index_type_ext ::= COMMA index_type index_type_ext 
            {
              Object RESULT =null;
		 Logger.print("Index type extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_ext",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // array_type ::= ARRAY LBRACK index_type index_type_ext RBRACK OF element_type 
            {
              Object RESULT =null;
		 Logger.print("Array type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unpacked_structured_type ::= array_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // structured_type ::= unpacked_structured_type 
            {
              Object RESULT =null;
		 Logger.print("Structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // structured_type ::= PACKED unpacked_structured_type 
            {
              Object RESULT =null;
		 Logger.print("Structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // enumerated_type ::= LPAREN identifier_list RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Enumerated type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // upper_bound ::= constant 
            {
              Object RESULT =null;
		 Logger.print("Upper bound definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upper_bound",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lower_bound ::= constant 
            {
              Object RESULT =null;
		 Logger.print("Lower bound definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lower_bound",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // subrange_type ::= lower_bound DOT_DOT upper_bound 
            {
              Object RESULT =null;
		 Logger.print("Subrange type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;
		 Logger.print("Simple type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // simple_type ::= subrange_type 
            {
              Object RESULT =null;
		 Logger.print("Simple type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type ::= type_identifier 
            {
              Object RESULT =null;
		 Logger.print("Type definition - type identifier");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type ::= pointer_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition - pointer type");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= structured_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition - structured type");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= simple_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition - simple type");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_definition ::= IDENTIFIER EQ type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("Type definition definition, id:" + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_definition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_ext",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_definition_part_ext ::= type_definition SEMICOLON type_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Type definition part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_ext",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_definition_part ::= TYPE type_definition SEMICOLON type_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Type definition part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_opt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_definition_part_opt ::= type_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Type definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_opt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // number ::= REAL_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Number definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // number ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Number definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sign_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sign_opt ::= SIGN 
            {
              Object RESULT =null;
		 Logger.print("Sign definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // constant ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, string: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // constant ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, number: " + n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= sign_opt IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, id: " + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant_definition ::= IDENTIFIER EQ constant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition definition, id: " + id + " constant:" + c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant_definition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_ext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant_definition_part_ext ::= constant_definition SEMICOLON constant_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_ext",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_definition_part ::= CONST constant_definition SEMICOLON constant_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part_opt ::= constant_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_opt",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // label ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number in = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Label definition: " + in);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // label_declaration_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_ext",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // label_declaration_part_ext ::= COMMA label label_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_ext",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part ::= LABEL label label_declaration_part_ext SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_declaration_part_opt ::= label_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_opt",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_part ::= label_declaration_part_opt constant_definition_part_opt type_definition_part_opt variable_declaration_part_opt procedure_and_function_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Declaration part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;
		 Logger.print("Block definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Identifier list definition, id: " + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		Logger.print("Identifier list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_heading_opt ::= LPAREN identifier_list RPAREN 
            {
              Object RESULT =null;
		Logger.print("Program header optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_heading_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading_opt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM IDENTIFIER program_heading_opt SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Program header definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;
		Logger.print("Program definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

