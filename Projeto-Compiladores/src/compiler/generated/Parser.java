
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Mar 01 16:34:49 BRT 2017
//----------------------------------------------------

package compiler.generated;

import compiler.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Mar 01 16:34:49 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\005\000\002\003" +
    "\010\000\002\005\003\000\002\005\005\000\002\004\004" +
    "\000\002\006\007\000\002\012\003\000\002\012\002\000" +
    "\002\011\006\000\002\013\005\000\002\013\002\000\002" +
    "\010\003\000\002\015\003\000\002\015\002\000\002\014" +
    "\006\000\002\016\005\000\002\016\002\000\002\017\005" +
    "\000\002\020\004\000\002\020\003\000\002\020\003\000" +
    "\002\064\003\000\002\064\002\000\002\065\003\000\002" +
    "\065\003\000\002\022\003\000\002\022\002\000\002\021" +
    "\006\000\002\023\005\000\002\023\002\000\002\024\005" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\025\003\000\002\025\003\000\002" +
    "\032\005\000\002\057\003\000\002\060\003\000\002\033" +
    "\005\000\002\026\004\000\002\026\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\011\000\002\042\005\000\002\042\002\000\002" +
    "\041\003\000\002\043\003\000\002\037\002\000\002\040" +
    "\002\000\002\027\002\000\002\062\003\000\002\062\002" +
    "\000\002\061\002\000\002\063\002\000\002\007\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\004\017\006\001\002\000\004\002\140\001" +
    "\002\000\004\021\020\001\ufff9\000\004\031\007\001\002" +
    "\000\004\011\010\001\002\000\004\031\012\001\002\000" +
    "\004\012\015\001\002\000\004\004\013\001\ufffe\000\004" +
    "\031\012\001\002\000\002\001\ufffd\000\004\005\016\001" +
    "\002\000\002\001\uffff\000\004\020\035\001\ufff3\000\004" +
    "\033\027\001\002\000\002\001\uffc5\000\002\001\ufffa\000" +
    "\004\007\024\001\002\000\002\001\000\000\002\001\ufffc" +
    "\000\004\004\030\001\ufff6\000\002\001\ufff5\000\004\033" +
    "\027\001\002\000\004\005\032\001\002\000\002\001\ufff8" +
    "\000\004\004\030\001\ufff6\000\002\001\ufff7\000\004\031" +
    "\127\001\002\000\004\022\042\001\uffe6\000\002\001\ufff4" +
    "\000\002\001\uffe7\000\002\001\uffc8\000\004\031\044\001" +
    "\002\000\004\005\117\001\002\000\004\015\045\001\002" +
    "\000\022\011\060\016\054\023\055\024\072\031\uffea\032" +
    "\064\033\067\034\071\001\uffcc\000\002\001\uffed\000\004" +
    "\010\114\001\002\000\002\001\uffda\000\002\001\uffd2\000" +
    "\002\001\uffe2\000\002\001\uffdc\000\002\001\uffeb\000\004" +
    "\024\072\001\uffcc\000\002\001\uffde\000\004\031\112\001" +
    "\002\000\004\031\012\001\002\000\002\001\uffd4\000\002" +
    "\001\uffd6\000\002\001\uffe1\000\002\001\uffec\000\002\001" +
    "\uffdf\000\002\001\uffdd\000\002\001\uffe9\000\002\001\uffd5" +
    "\000\002\001\uffe8\000\004\013\075\001\002\000\002\001" +
    "\uffe0\000\002\001\uffd3\000\014\011\060\016\054\032\064" +
    "\033\067\034\071\001\uffea\000\002\001\uffce\000\004\004" +
    "\100\001\uffcf\000\014\011\060\016\054\032\064\033\067" +
    "\034\071\001\uffea\000\004\014\102\001\002\000\004\025" +
    "\103\001\002\000\022\011\060\016\054\023\055\024\072" +
    "\031\uffea\032\064\033\067\034\071\001\uffcc\000\002\001" +
    "\uffcd\000\002\001\uffd1\000\004\004\100\001\uffcf\000\002" +
    "\001\uffd0\000\004\012\111\001\002\000\002\001\uffd8\000" +
    "\002\001\uffee\000\002\001\uffd7\000\012\016\054\032\064" +
    "\033\067\034\071\001\uffea\000\002\001\uffdb\000\002\001" +
    "\uffd9\000\004\031\044\001\uffe3\000\004\005\122\001\002" +
    "\000\002\001\uffe5\000\004\031\044\001\uffe3\000\002\001" +
    "\uffe4\000\002\001\uffc6\000\002\001\uffc9\000\002\001\ufffb" +
    "\000\004\015\136\001\002\000\004\005\131\001\002\000" +
    "\004\031\127\001\ufff0\000\002\001\ufff2\000\004\005\134" +
    "\001\002\000\004\031\127\001\ufff0\000\002\001\ufff1\000" +
    "\012\016\054\032\064\033\067\034\071\001\uffea\000\002" +
    "\001\uffef\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\136\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\022\006\020\011\021\012\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\036\015\035\001\001\000\004\010\025" +
    "\001\001\000\004\007\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\030\001\001\000\002\001\001\000\004\010\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\033" +
    "\001\001\000\002\001\001\000\004\017\127\001\001\000" +
    "\006\021\037\022\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\124\062\123\001\001\000\004\024" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\020\047\025\062\026\072\027\064\030\055\031\051\032" +
    "\065\033\052\034\061\035\067\036\060\037\073\040\050" +
    "\057\046\064\056\065\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\112\035\067\036\060\037\073\040\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\020\047\025" +
    "\075\032\065\033\052\041\076\057\046\064\056\065\045" +
    "\001\001\000\002\001\001\000\004\042\100\001\001\000" +
    "\022\020\047\025\075\032\065\033\052\041\105\057\046" +
    "\064\056\065\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\020\047\025\062\026\072\027\064\030\055" +
    "\031\103\032\065\033\052\034\061\035\067\036\060\037" +
    "\073\040\050\043\104\057\046\064\056\065\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\042\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\115\060" +
    "\114\064\056\065\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\120\024\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\023\122\024\117\001\001" +
    "\000\002\001\001\000\004\063\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\131\017\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\016\134\017\132\001\001\000\002" +
    "\001\001\000\010\020\136\064\056\065\045\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // statement_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // procedure_and_function_declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable_declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable_declaration_part_opt ::= variable_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // pointer_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_type",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // file_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // set_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_type",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // element_type ::= type 
            {
              Object RESULT =null;
		 Logger.print("Element type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // index_type ::= simple_type 
            {
              Object RESULT =null;
		 Logger.print("Index type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // index_type_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_ext",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // index_type_ext ::= COMMA index_type index_type_ext 
            {
              Object RESULT =null;
		 Logger.print("Index type extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_ext",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_type ::= ARRAY LBRACK index_type index_type_ext RBRACK OF element_type 
            {
              Object RESULT =null;
		 Logger.print("Array type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unpacked_structured_type ::= array_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structured_type ::= unpacked_structured_type 
            {
              Object RESULT =null;
		 Logger.print("Structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structured_type ::= PACKED unpacked_structured_type 
            {
              Object RESULT =null;
		 Logger.print("Structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // enumerated_type ::= LPAREN identifier_list RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Enumerated type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // upper_bound ::= constant 
            {
              Object RESULT =null;
		 Logger.print("Upper bound definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upper_bound",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lower_bound ::= constant 
            {
              Object RESULT =null;
		 Logger.print("Lower bound definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lower_bound",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subrange_type ::= lower_bound DOT_DOT upper_bound 
            {
              Object RESULT =null;
		 Logger.print("Subrange type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;
		 Logger.print("Simple type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_type ::= subrange_type 
            {
              Object RESULT =null;
		 Logger.print("Simple type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= type_identifier 
            {
              Object RESULT =null;
		 Logger.print("Type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= pointer_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= structured_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= simple_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_definition ::= IDENTIFIER EQ type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("Type definition definition, id:" + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_definition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_ext",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_definition_part_ext ::= type_definition SEMICOLON type_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Type definition part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_ext",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_definition_part ::= TYPE type_definition SEMICOLON type_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Type definition part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_opt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_definition_part_opt ::= type_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Type definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_opt",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number ::= REAL_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Number definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // number ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Number definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sign_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sign_opt ::= SIGN 
            {
              Object RESULT =null;
		 Logger.print("Sign definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, string: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, number: " + n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= sign_opt IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, id: " + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant_definition ::= IDENTIFIER EQ constant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition definition, id: " + id + " constant:" + c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_definition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part_ext ::= constant_definition SEMICOLON constant_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part ::= CONST constant_definition SEMICOLON constant_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_opt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant_definition_part_opt ::= constant_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_opt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // label ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number in = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Label definition: " + in);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_ext",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part_ext ::= COMMA label label_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_ext",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_declaration_part ::= LABEL label label_declaration_part_ext SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // label_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part_opt ::= label_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= label_declaration_part_opt constant_definition_part_opt type_definition_part_opt variable_declaration_part_opt procedure_and_function_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Declaration part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;
		 Logger.print("Block definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		Logger.print("Identifier list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		Logger.print("Identifier list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Program header definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;
		Logger.print("Program definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

