
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 02 20:46:49 BRT 2017
//----------------------------------------------------

package compiler.generated;

import compiler.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 02 20:46:49 BRT 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\121\000\002\002\004\000\002\002\005\000\002\003" +
    "\010\000\002\005\005\000\002\005\003\000\002\004\004" +
    "\000\002\006\007\000\002\012\003\000\002\012\002\000" +
    "\002\011\006\000\002\013\005\000\002\013\002\000\002" +
    "\010\003\000\002\015\003\000\002\015\002\000\002\014" +
    "\006\000\002\016\005\000\002\016\002\000\002\017\005" +
    "\000\002\020\004\000\002\020\003\000\002\020\003\000" +
    "\002\064\003\000\002\064\002\000\002\065\003\000\002" +
    "\065\003\000\002\027\003\000\002\027\002\000\002\026" +
    "\006\000\002\030\005\000\002\030\002\000\002\031\005" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\021\003\000\002\021\003\000\002" +
    "\032\005\000\002\057\003\000\002\060\003\000\002\033" +
    "\005\000\002\022\004\000\002\022\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\011\000\002\042\005\000\002\042\002\000\002" +
    "\041\003\000\002\043\003\000\002\036\005\000\002\044" +
    "\004\000\002\044\003\000\002\044\002\000\002\045\004" +
    "\000\002\051\002\000\002\051\005\000\002\050\005\000" +
    "\002\046\002\000\002\046\004\000\002\047\010\000\002" +
    "\052\004\000\002\052\002\000\002\054\005\000\002\054" +
    "\002\000\002\053\007\000\002\055\004\000\002\056\005" +
    "\000\002\056\002\000\002\037\002\000\002\040\002\000" +
    "\002\023\002\000\002\024\002\000\002\062\003\000\002" +
    "\062\002\000\002\061\002\000\002\063\002\000\002\007" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\004\017\006\001\002\000\004\002\205\001" +
    "\002\000\004\021\020\001\ufff9\000\004\031\007\001\002" +
    "\000\004\011\010\001\002\000\004\031\012\001\002\000" +
    "\004\012\015\001\002\000\004\004\013\001\ufffd\000\004" +
    "\031\012\001\002\000\002\001\ufffe\000\004\005\016\001" +
    "\002\000\002\001\uffff\000\004\020\035\001\ufff3\000\004" +
    "\033\027\001\002\000\002\001\uffb1\000\002\001\ufffa\000" +
    "\004\007\024\001\002\000\002\001\000\000\002\001\ufffc" +
    "\000\004\004\030\001\ufff6\000\002\001\ufff5\000\004\033" +
    "\027\001\002\000\004\005\032\001\002\000\002\001\ufff8" +
    "\000\004\004\030\001\ufff6\000\002\001\ufff7\000\004\031" +
    "\174\001\002\000\004\022\042\001\uffe6\000\002\001\ufff4" +
    "\000\002\001\uffe7\000\002\001\uffb4\000\004\031\044\001" +
    "\002\000\004\005\164\001\002\000\004\015\045\001\002" +
    "\000\024\011\060\016\054\023\055\024\073\026\067\031" +
    "\uffea\032\064\033\070\034\072\001\uffb9\000\002\001\uffed" +
    "\000\004\010\161\001\002\000\002\001\uffda\000\002\001" +
    "\uffd2\000\002\001\uffe2\000\002\001\uffdc\000\002\001\uffeb" +
    "\000\006\024\073\026\067\001\uffb9\000\002\001\uffde\000" +
    "\004\031\157\001\002\000\004\031\012\001\002\000\002" +
    "\001\uffd4\000\002\001\uffd6\000\002\001\uffe1\000\002\001" +
    "\uffec\000\002\001\uffdf\000\002\001\uffdd\000\006\030\115" +
    "\031\012\001\uffc9\000\002\001\uffe9\000\002\001\uffd5\000" +
    "\002\001\uffe8\000\004\013\076\001\002\000\002\001\uffe0" +
    "\000\002\001\uffd3\000\014\011\060\016\054\032\064\033" +
    "\070\034\072\001\uffea\000\002\001\uffce\000\004\004\101" +
    "\001\uffcf\000\014\011\060\016\054\032\064\033\070\034" +
    "\072\001\uffea\000\004\014\103\001\002\000\004\025\104" +
    "\001\002\000\024\011\060\016\054\023\055\024\073\026" +
    "\067\031\uffea\032\064\033\070\034\072\001\uffb9\000\002" +
    "\001\uffcd\000\002\001\uffd1\000\004\004\101\001\uffcf\000" +
    "\002\001\uffd0\000\004\005\152\001\uffc4\000\002\001\uffca" +
    "\000\004\005\146\001\uffc7\000\004\006\144\001\002\000" +
    "\004\031\121\001\002\000\004\027\117\001\002\000\002" +
    "\001\uffcc\000\004\031\123\001\002\000\004\006\122\001" +
    "\002\000\002\001\uffc1\000\004\025\124\001\002\000\012" +
    "\016\054\032\064\033\070\034\072\001\uffea\000\004\005" +
    "\140\001\uffbe\000\004\004\134\001\uffba\000\004\006\130" +
    "\001\002\000\004\011\131\001\002\000\006\030\115\031" +
    "\012\001\uffc9\000\004\012\133\001\002\000\002\001\uffbd" +
    "\000\012\016\054\032\064\033\070\034\072\001\uffea\000" +
    "\002\001\uffbc\000\004\004\134\001\uffba\000\002\001\uffbb" +
    "\000\012\016\054\032\064\033\070\034\072\001\uffea\000" +
    "\002\001\uffc2\000\004\005\140\001\uffbe\000\002\001\uffbf" +
    "\000\024\011\060\016\054\023\055\024\073\026\067\031" +
    "\uffea\032\064\033\070\034\072\001\uffb9\000\002\001\uffc5" +
    "\000\004\031\012\001\002\000\002\001\uffc8\000\004\005" +
    "\146\001\uffc7\000\002\001\uffc6\000\004\030\115\001\002" +
    "\000\002\001\uffcb\000\002\001\uffc3\000\004\012\156\001" +
    "\002\000\002\001\uffd8\000\002\001\uffee\000\002\001\uffd7" +
    "\000\012\016\054\032\064\033\070\034\072\001\uffea\000" +
    "\002\001\uffdb\000\002\001\uffd9\000\004\031\044\001\uffe3" +
    "\000\004\005\167\001\002\000\002\001\uffe5\000\004\031" +
    "\044\001\uffe3\000\002\001\uffe4\000\002\001\uffb2\000\002" +
    "\001\uffb5\000\002\001\ufffb\000\004\015\203\001\002\000" +
    "\004\005\176\001\002\000\004\031\174\001\ufff0\000\002" +
    "\001\ufff2\000\004\005\201\001\002\000\004\031\174\001" +
    "\ufff0\000\002\001\ufff1\000\012\016\054\032\064\033\070" +
    "\034\072\001\uffea\000\002\001\uffef\000\002\001\001" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\022\006\020\011\021\012\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\036\015\035\001\001\000\004\010\025" +
    "\001\001\000\004\007\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\030\001\001\000\002\001\001\000\004\010\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\033" +
    "\001\001\000\002\001\001\000\004\017\174\001\001\000" +
    "\006\026\037\027\040\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\061\171\062\170\001\001\000\004\031" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\020\047\021\062\022\073\023\064\024\055\025\051\032" +
    "\065\033\052\034\061\035\070\036\060\037\074\040\050" +
    "\057\046\064\056\065\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\034" +
    "\157\035\070\036\060\037\074\040\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\113\044\115\045\110\047\111\050\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\020\047" +
    "\021\076\032\065\033\052\041\077\057\046\064\056\065" +
    "\045\001\001\000\002\001\001\000\004\042\101\001\001" +
    "\000\022\020\047\021\076\032\065\033\052\041\106\057" +
    "\046\064\056\065\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\020\047\021\062\022\073\023\064\024" +
    "\055\025\104\032\065\033\052\034\061\035\070\036\060" +
    "\037\074\040\050\043\105\057\046\064\056\065\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\107" +
    "\001\001\000\002\001\001\000\004\046\152\001\001\000" +
    "\002\001\001\000\004\051\146\001\001\000\002\001\001" +
    "\000\004\052\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\020\125\053\124\055\126\064" +
    "\056\065\045\001\001\000\004\054\140\001\001\000\004" +
    "\056\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\113\044\131\045\110\047\111\050\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\135\064" +
    "\056\065\045\001\001\000\002\001\001\000\004\056\136" +
    "\001\001\000\002\001\001\000\014\020\125\053\141\055" +
    "\126\064\056\065\045\001\001\000\002\001\001\000\004" +
    "\054\142\001\001\000\002\001\001\000\042\020\047\021" +
    "\062\022\073\023\064\024\055\025\144\032\065\033\052" +
    "\034\061\035\070\036\060\037\074\040\050\057\046\064" +
    "\056\065\045\001\001\000\002\001\001\000\006\005\113" +
    "\050\147\001\001\000\002\001\001\000\004\051\150\001" +
    "\001\000\002\001\001\000\004\047\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\162" +
    "\060\161\064\056\065\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\030\165\031\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\030\167\031\164\001" +
    "\001\000\002\001\001\000\004\063\172\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\016\176\017\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\016\201\017\177\001\001\000" +
    "\002\001\001\000\010\020\203\064\056\065\045\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 public void report_error(String message, Object info){
   StringBuffer m = new StringBuffer("Error: " + message + "\n");
   System.err.print(m);
 }

 public void report_fatal_error(String message, Object info) {
   report_error(message, info);
   throw new RuntimeException("Fatal Syntax Error");
 }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // statement_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // procedure_and_function_declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_and_function_declaration_part",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_declaration_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable_declaration_part_opt ::= variable_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Variable declaration part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_declaration_part_opt",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type_identifier ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_identifier",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // pointer_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pointer_type",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // file_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("file_type",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // set_type ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_type",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // constant_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_ext",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // constant_ext ::= COMMA constant constant_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_ext",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // case_label_list ::= constant constant_ext 
            {
              Object RESULT =null;
		 Logger.print("Case label list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("case_label_list",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // variant ::= case_label_list COLON LPAREN field_list RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Variant definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // variant_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_ext",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // variant_ext ::= SEMICOLON variant variant_ext 
            {
              Object RESULT =null;
		 Logger.print("Variant extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_ext",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // tag_field ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // tag_field ::= IDENTIFIER COLON 
            {
              Object RESULT =null;
		 Logger.print("Tag field definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tag_field",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variant_part ::= CASE tag_field IDENTIFIER OF variant variant_ext 
            {
              Object RESULT =null;
		 Logger.print("Variant part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variant_part_opt ::= SEMICOLON variant_part 
            {
              Object RESULT =null;
		 Logger.print("Variant part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part_opt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variant_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variant_part_opt",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // record_section ::= identifier_list COLON type 
            {
              Object RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object il = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Record section definition, type: " + t + " identifier list :" + il);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // record_section_ext ::= SEMICOLON record_section record_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Record section extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section_ext",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // record_section_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_section_ext",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // fixed_part ::= record_section record_section_ext 
            {
              Object RESULT =null;
		 Logger.print("Fixed part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fixed_part",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // field_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // field_list ::= variant_part 
            {
              Object RESULT =null;
		 Logger.print("Field list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // field_list ::= fixed_part variant_part_opt 
            {
              Object RESULT =null;
		 Logger.print("Field list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("field_list",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // record_type ::= RECORD field_list END 
            {
              Object RESULT =null;
		 Logger.print("Record type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("record_type",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // element_type ::= type 
            {
              Object RESULT =null;
		 Logger.print("Element type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("element_type",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // index_type ::= simple_type 
            {
              Object RESULT =null;
		 Logger.print("Index type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // index_type_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_ext",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // index_type_ext ::= COMMA index_type index_type_ext 
            {
              Object RESULT =null;
		 Logger.print("Index type extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("index_type_ext",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // array_type ::= ARRAY LBRACK index_type index_type_ext RBRACK OF element_type 
            {
              Object RESULT =null;
		 Logger.print("Array type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("array_type",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // unpacked_structured_type ::= file_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // unpacked_structured_type ::= set_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // unpacked_structured_type ::= record_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // unpacked_structured_type ::= array_type 
            {
              Object RESULT =null;
		 Logger.print("Unpacked structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("unpacked_structured_type",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // structured_type ::= unpacked_structured_type 
            {
              Object RESULT =null;
		 Logger.print("Structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // structured_type ::= PACKED unpacked_structured_type 
            {
              Object RESULT =null;
		 Logger.print("Structured type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structured_type",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // enumerated_type ::= LPAREN identifier_list RPAREN 
            {
              Object RESULT =null;
		 Logger.print("Enumerated type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("enumerated_type",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // upper_bound ::= constant 
            {
              Object RESULT =null;
		 Logger.print("Upper bound definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upper_bound",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // lower_bound ::= constant 
            {
              Object RESULT =null;
		 Logger.print("Lower bound definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lower_bound",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subrange_type ::= lower_bound DOT_DOT upper_bound 
            {
              Object RESULT =null;
		 Logger.print("Subrange type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("subrange_type",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // simple_type ::= enumerated_type 
            {
              Object RESULT =null;
		 Logger.print("Simple type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // simple_type ::= subrange_type 
            {
              Object RESULT =null;
		 Logger.print("Simple type definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_type",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type ::= type_identifier 
            {
              Object RESULT =null;
		 Logger.print("Type definition - type identifier");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type ::= pointer_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition - pointer type");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type ::= structured_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition - structured type");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= simple_type 
            {
              Object RESULT =null;
		 Logger.print("Type definition - simple type");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_definition ::= IDENTIFIER EQ type 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Logger.print("Type definition definition, id:" + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_definition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_ext",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_definition_part_ext ::= type_definition SEMICOLON type_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Type definition part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_ext",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_definition_part ::= TYPE type_definition SEMICOLON type_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Type definition part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_definition_part_opt ::= type_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Type definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_definition_part_opt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // number ::= REAL_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Number definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // number ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		 Logger.print("Number definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sign_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sign_opt ::= SIGN 
            {
              Object RESULT =null;
		 Logger.print("Sign definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sign_opt",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // constant ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String s = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, string: " + s);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // constant ::= number 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, number: " + n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // constant ::= sign_opt IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition, id: " + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // constant_definition ::= IDENTIFIER EQ constant 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Constant definition definition, id: " + id + " constant:" + c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // constant_definition_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // constant_definition_part_ext ::= constant_definition SEMICOLON constant_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_ext",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // constant_definition_part ::= CONST constant_definition SEMICOLON constant_definition_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constant_definition_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_opt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constant_definition_part_opt ::= constant_definition_part 
            {
              Object RESULT =null;
		 Logger.print("Constant definition part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constant_definition_part_opt",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // label ::= INTEGER_NUMBER 
            {
              Object RESULT =null;
		int inleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.Number in = (java.lang.Number)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Logger.print("Label definition: " + in);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // label_declaration_part_ext ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_ext",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // label_declaration_part_ext ::= COMMA label label_declaration_part_ext 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part extended definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_ext",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // label_declaration_part ::= LABEL label label_declaration_part_ext SEMICOLON 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // label_declaration_part_opt ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // label_declaration_part_opt ::= label_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Label declaration part optional definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("label_declaration_part_opt",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_part ::= label_declaration_part_opt constant_definition_part_opt type_definition_part_opt variable_declaration_part_opt procedure_and_function_declaration_part 
            {
              Object RESULT =null;
		 Logger.print("Declaration part definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declaration_part",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // block ::= declaration_part statement_part 
            {
              Object RESULT =null;
		 Logger.print("Block definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identifier_list ::= IDENTIFIER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		Logger.print("Identifier list definition, id: " + id);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // identifier_list ::= IDENTIFIER COMMA identifier_list 
            {
              Object RESULT =null;
		Logger.print("Identifier list definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_heading ::= PROGRAM IDENTIFIER LPAREN identifier_list RPAREN SEMICOLON 
            {
              Object RESULT =null;
		Logger.print("Program header definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_heading",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= program_heading block DOT 
            {
              Object RESULT =null;
		Logger.print("Program definition");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

